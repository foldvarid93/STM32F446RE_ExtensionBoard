/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.32                          *
*        Compiled Oct  8 2015, 11:59:02                              *
*        (c) 2015 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END

#include "ExtensionBoard.h"
#include "DIALOG.h"

/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_WINDOW_0   (GUI_ID_USER + 0x00)
#define ID_BUTTON_0   (GUI_ID_USER + 0x01)
#define ID_GRAPH_0   (GUI_ID_USER + 0x04)
#define ID_SLIDER_0   (GUI_ID_USER + 0x05)
extern MPU6050 mpu1;

// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 0, 0, 240, 400, 0, 0x0, 0 },
  { BUTTON_CreateIndirect, "hello", ID_BUTTON_0, 60, 18, 200, 40, 0, 0x0, 0 },
  { GRAPH_CreateIndirect, "Graph", ID_GRAPH_0, 0, 70, 320, 120, 0, 0x0, 0 },
  { SLIDER_CreateIndirect, "Slider", ID_SLIDER_0, 0, 210, 320, 30, 0, 0x0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};
/*********************************************************************
*
*       Static code
*
**********************************************************************
*/

// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/
static void _cbDialog(WM_MESSAGE * pMsg) {
  int     NCode;
  int     Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
    case ID_BUTTON_0: // Notifications sent by 'hello'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    case ID_SLIDER_0: // Notifications sent by 'Slider'
      switch(NCode) {
      case WM_NOTIFICATION_CLICKED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_RELEASED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      case WM_NOTIFICATION_VALUE_CHANGED:
        // USER START (Optionally insert code for reacting on notification message)
        // USER END
        break;
      // USER START (Optionally insert additional code for further notification handling)
      // USER END
      }
      break;
    // USER START (Optionally insert additional code for further Ids)
    // USER END
    }
    break;
  // USER START (Optionally insert additional message handling)
  // USER END
  default:
    WM_DefaultProc(pMsg);
    break;
  }
}

/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateWindow
*/
WM_HWIN CreateWindow(void);
WM_HWIN CreateWindow(void) {
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  return hWin;
}

// USER START (Optionally insert additional public code)
void MainTask2(void) {
	CreateWindow();
	U8 i = 0;
	PROGBAR_Handle hProgBar;
	GUI_SetColor(GUI_WHITE);
	GUI_DispStringAt("Progress bar", 100, 50);
	hProgBar = PROGBAR_Create(10, 90, 380, 60, WM_CF_SHOW);
	GUI_SetOrientation(GUI_ROTATION_180);
	while (1) {
		PROGBAR_SetBarColor(hProgBar, 0, GUI_GREEN);
		PROGBAR_SetValue(hProgBar, i);
		GUI_Exec();
		GUI_Delay(200);
		i++;
		if (i > 100) {
			i = 0;
			//break;
		}
	}
}
void MainTask(void) {
	GUI_Init();
	GUI_Clear();
	U8 IOdata;
	char str[1000];
	float LM75Temp;
	float BME280Temp;
	float BME280Humidity;
	float BME280Pressure;
	uint32_t TEMT6000;
	U8 i = 0;
	PROGBAR_Handle hProgBar;
	TEXT_Handle hText;
	GUI_SetColor(GUI_WHITE);
	//GUI_DispStringAt("Progress bar", 100, 50);
	hProgBar = PROGBAR_Create(10, 160, 380, 50, WM_CF_SHOW);
	hText=TEXT_Create(0,0,400,100,0,WM_CF_SHOW,"Hello",GUI_TA_LEFT|GUI_TA_TOP);
	GUI_SetOrientation(GUI_ROTATION_180);
	PROGBAR_SKINFLEX_PROPS pProps;
	PROGBAR_GetSkinFlexProps(&pProps,0);
	while (1) {
		//LM75
		LM75Temp=ReadLM75();
		//BME280
		BME280Temp = BME280_ReadTemperature();
		BME280Humidity=BME280_ReadHumidity();
		BME280Pressure=BME280_ReadPressure();
		//MPU6050
		MPU6050_ReadTemperature(&mpu1);
		MPU6050_ReadAll(&mpu1);
		//On chip temp sensor
		//TODO
		//TEMT6000 LightSensor
		if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK){//analog read
			TEMT6000 = HAL_ADC_GetValue(&hadc1);
		}
		//Write to display
		sprintf(str,
				"LM75 Temp=%.1f °C\r\n"
				"BME280: Temp=%.2f °C, Humidity=%.2f, Pressure=%.2f\r\n"
				"MPU6050 Accelerometer: X=%d, Y=%d, Z=%d\r\n"
				"MPU6050 Temp=%.2f °C\r\n"
				"MPU6050 Gyroscope: X=%d, Y=%d, Z=%d\r\n"
				"TEMT6000 LightSensor ADC=%u\r\n"
				,LM75Temp
				,BME280Temp, BME280Humidity, BME280Pressure/1000
				,mpu1.Accelerometer_X,mpu1.Accelerometer_Y,mpu1.Accelerometer_Z
				,mpu1.Temperature
				,mpu1.Gyroscope_X,mpu1.Gyroscope_Y,mpu1.Gyroscope_Z
				,(uint16_t)TEMT6000
				);
		//GUI_DispStringAt((const char*)str, 0, 0);
		TEXT_SetTextColor(hText, GUI_WHITE);
		TEXT_SetBkColor(hText,GUI_BLACK);
		TEXT_SetText(hText, str);
		//
		pProps.aColorLowerL[0]=0x0029D4;//
		pProps.aColorLowerL[1]=0x1C33E2;//
		pProps.aColorUpperL[0]=0xCDCDFF;//
		pProps.aColorUpperL[1]=0x9CACEE;//
		PROGBAR_SetSkinFlexProps(&pProps,0);
		PROGBAR_SetText(hProgBar, "");
		PROGBAR_SetValue(hProgBar, i);
		SetHBridgePWM(i);
		GUI_Exec();
		GUI_Delay(200);
		if(TIM3->CNT<0x7FFF){
			TIM3->CNT=0x7FFF;
		}
		if(TIM3->CNT>0x8063){
			TIM3->CNT=0x8063;
		}
		i=TIM3->CNT-0x7FFF;

		IOdata=~ReadIOExpander();
		if(IOdata&0x01){
			SetBackLightPWM(100);
		}
		if(IOdata&0x02){
			WriteIOExpander(0x40);
		}
		if(IOdata&0x04){
			WriteIOExpander(0x20);
		}
		if(IOdata&0x08){
			SetBackLightPWM(0);
		}
		if(!(IOdata&0x80)){
			SetBackLightPWM(100);
		}
	}
}
// USER END

/*************************** End of file ****************************/
